trainer: geossl_pretrain

task:
  # run_mode: train
  identifier: "geossl_sigma0.5"
  reprocess: False
  parallel: True
  # seed=0 means random initalization
  seed: 0
  # Defaults to run directory if not specified
  save_dir:
  # continue from a previous job
  continue_job: False
  # spefcify if the training state is loaded: epochs, learning rate, etc
  load_training_state: False
  # Path to the checkpoint.pt file
  checkpoint_path:
  # E.g. ["train", "val", "test"]
  write_output: [ "train", "val", "test" ]
  # Specify if labels are provided for the predict task
  # labels: True
  use_amp: True

model:
  name: torchmd_etEarly_GEOSSL
  # model attributes
  hidden_channels: 128
  num_filters: 128
  num_layers: 8
  num_rbf: 50
  rbf_type: "expnorm"
  trainable_rbf: True
  activation: "silu"
  attn_activation: "silu"
  num_heads: 8
  distance_influence: "both"
  neighbor_embedding: True
  cutoff_lower: 0.0
  cutoff_upper: 8.0
  max_z: 100
  max_num_neighbors: 32
  aggr: "add"
  num_post_layers: 2
  post_hidden_channels: 128  
  pool: "global_mean_pool"
  # Compute edge features on the fly
  otf_edge: False 
  # compute gradients w.r.t to positions and cell, requires otf_edge=True  
  gradient: False
  # method of computing gradients: "conventional" or "nequip"
  gradient_method: "nequip"

optim:
  max_epochs: 100
  max_checkpoint_epochs: 0
  lr: 0.0001
  # Either custom or from torch.nn.functional library. If from torch, loss_type is TorchLossWrapper
  loss:
    loss_type: "NCSN"
    loss_args: {"emb_dim": 128, "sigma_begin": 10, "sigma_end": 0.01, "num_noise_level": 30, "anneal_power": 2}
    # "num_noise_level": (30 50)  "anneal_power": (0.05 2 5 10)
  clip_grad_norm: 10

  batch_size: 100
  optimizer:
    optimizer_type: "AdamW"
    optimizer_args: { }
  scheduler:
    scheduler_type: "ReduceLROnPlateau"
    scheduler_args: { "mode": "min", "factor": 0.8, "patience": 10, "min_lr": 0.00001, "threshold": 0.0002 }
  #Training print out frequency (print per n number of epochs)
  verbosity: 1
  # tdqm progress bar per batch in the epoch
  batch_tqdm: False

dataset:
  name: "QM9"
  processed: False
  # Path to data files - this can either be in the form of a string denoting a single path or a dictionary of {train: train_path, val: val_path, test: test_path}
  src: "data/QM9/QM9.json"
  #src: {train: "data/test_data/raw/", val: "data/test_data/raw/", test: "data/test_data/raw/"}
  # Path to target file within data_path - this can either be in the form of a string denoting a single path or a dictionary of {train: train_path, val: val_path, test: test_path} or left blank when the dataset is a single json file
  target_path: 
  #target_path: {train: "data/test_data/targets.csv", val: "data/test_data/targets.csv", test: "data/test_data/targets.csv"}
  # Path to save processed data.pt file
  pt_path: "data/QM9_pretrain/processed/"
  prediction_level: "graph"

  transforms:
    - name: GetY
      args:
        # index specifies the index of a target vector to predict, which is useful when there are multiple property labels for a single dataset
        # For example, an index: 0 (default) will use the first entry in the target vector
        # if all values are to be predicted simultaneously, then specify index: -1
        index: -1
      otf: True # Optional parameter, default is False
  # Format of data files (limit to those supported by ASE)
  data_format: "json"
  # Method of obtaining atom idctionary: available:(onehot)
  node_representation: "onehot"
  additional_attributes:
  # Print out processing info
  verbose: True
  # Index of target column in targets.csv
  # graph specific settings
  preprocess_params:
    # one of mdl (minimum image convention), ocp (all neighbors included)
    edge_calc_method: mdl
    # determine if edges are computed, if false, then they need to be computed on the fly
    preprocess_edges: True
    # determine if edge attributes are computed during processing, if false, then they need to be computed on the fly
    preprocess_edge_features: True
    # determine if node attributes are computed during processing, if false, then they need to be computed on the fly
    preprocess_node_features: True
    # distance cutoff to determine if two atoms are connected by an edge
    cutoff_radius : 8.0
    # maximum number of neighbors to consider (usually an arbitrarily high number to consider all neighbors)
    n_neighbors : 250
    # number of pbc offsets to consider when determining neighbors (usually not changed)
    num_offsets: 2
    edge_steps: 50
    # dimension of node attributes
    node_dim : 100
    # dimension of edge attributes
    edge_dim : 50
    # whether or not to add self-loops
    self_loop: True
    # Method of obtaining atom dictionary: available: (onehot)
    node_representation: onehot
  num_workers: 4
  dataset_device: cuda
  # Ratios for train/val/test split out of a total of 1
  train_ratio: 0.95
  val_ratio: 0.05
  test_ratio: 0
